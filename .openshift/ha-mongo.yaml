---
  # credit to this template goes to https://github.com/RocketChat/Rocket.Chat/blob/develop/.openshift/rocket-chat-ephemeral.json
  kind: Template
  apiVersion: v1
  metadata:
    name: rocket-chat
    annotations:
      description: Rocket.Chat with a MongoDB database running with a Persistent storage.
        Use this template if you want to run Rocket.Chat in production.
      tags: quickstart,nodejs,mongodb,instant-app
      iconClass: icon-nodejs
  objects:
  - kind: PersistentVolumeClaim
    apiVersion: v1
    metadata:
      name: "${DATABASE_SERVICE_NAME}"
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: "${VOLUME_CAPACITY}"
  - kind: StatefulSet
    apiVersion: v1
    metadata:
      name: mongodb
      labels:
        template: mongodb-persistent-template
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: name
                operator: In
                values: 
                - ${MONGODB_SERVICE_NAME}
            topologyKey: "kubernetes.io/hostname"
      strategy:
        type: Recreate
        recreateParams:
          timeoutSeconds: 600
      triggers:
      - type: ImageChange
        imageChangeParams:
          automatic: true
          containerNames:
          - mongodb
          from:
            kind: ImageStreamTag
            namespace: openshift
            name: mongodb:latest
      - type: ConfigChange
      replicas: ${MONGO_DB_REPLICAS}
      test: false
      selector:
        name: mongodb
      template:
        metadata:
          creationTimestamp: 
          labels:
            name: mongodb
        spec:
          containers:
          - name: mongodb
            image: registry.access.redhat.com/rhscl/mongodb-26-rhel7:1
            ports:
            - containerPort: 27017
              protocol: TCP
            env:
            - name: MONGODB_USER
              value: "${MONGODB_USER}"
            - name: MONGODB_PASSWORD
              value: "${MONGODB_PASSWORD}"
            - name: MONGODB_DATABASE
              value: "${MONGODB_DATABASE}"
            - name: MONGODB_ADMIN_PASSWORD
              value: "${MONGODB_ADMIN_PASSWORD}"
            resources:
              limits:
                memory: "${MEMORY_LIMIT}"
            volumeMounts:
            - name: mongodb-data
              mountPath: "/var/lib/mongodb/data"
            livenessProbe:
              tcpSocket:
                port: 27017
              initialDelaySeconds: 30
              timeoutSeconds: 1
              periodSeconds: 10
              successThreshold: 1
              failureThreshold: 3
            readinessProbe:
              exec:
                command:
                - "/bin/sh"
                - "-i"
                - "-c"
                - mongo 127.0.0.1:27017/$MONGODB_DATABASE -u $MONGODB_USER -p $MONGODB_PASSWORD
                  --eval="quit()"
              initialDelaySeconds: 3
              timeoutSeconds: 1
              periodSeconds: 10
              successThreshold: 1
              failureThreshold: 3
            terminationMessagePath: "/dev/termination-log"
            imagePullPolicy: IfNotPresent
            securityContext:
              capabilities: {}
              privileged: false
          volumes:
          - name: "${DATABASE_SERVICE_NAME}-data"
            persistentVolumeClaim:
              claimName: "${DATABASE_SERVICE_NAME}"
          restartPolicy: Always
          terminationGracePeriodSeconds: 30
          dnsPolicy: ClusterFirst
          securityContext: {}
    status: {}
 
  - kind: Service
    apiVersion: v1
    metadata:
      name: mongodb
      creationTimestamp: 
      labels:
        template: mongodb-persistent-template
    spec:
      ports:
      - name: mongo
        protocol: TCP
        port: 27017
        targetPort: 27017
      selector:
        name: mongodb
      type: ClusterIP
      sessionAffinity: None
    status:
      loadBalancer: {}
  parameters:
  - name: MEMORY_LIMIT
    displayName: Memory Limit
    description: Maximum amount of memory the container can use.
    value: 512Mi
  - name: DATABASE_SERVICE_NAME
    displayName: Database Service Name
    description: The name of the OpenShift Service exposed for the database.
    value: mongodb
    required: true
  - name: MONGODB_USER
    displayName: MongoDB User
    description: Username for MongoDB user that will be used for accessing the database.
    generate: expression
    from: user[A-Z0-9]{3}
    required: true
  - name: MONGODB_PASSWORD
    displayName: MongoDB Password
    description: Password for the MongoDB user.
    generate: expression
    from: "[a-zA-Z0-9]{16}"
    required: true
  - name: MONGODB_DATABASE
    displayName: MongoDB Database Name
    description: Name of the MongoDB database accessed.
    value: rocketchatdb
    required: true
  - name: MONGODB_ADMIN_PASSWORD
    displayName: MongoDB Admin Password
    description: Password for the database admin user.
    generate: expression
    from: "[a-zA-Z0-9]{16}"
    required: true
  
  - name: VOLUME_CAPACITY
    displayName: Volume Capacity
    description: Volume space available for data, e.g. 512Mi, 2Gi.
    value: 1Gi
    required: true
  ## Added params by me 
  - name: MONGO_DB_REPLICAS
    displayName: MongoDb replicas
    value: 3
    required: true